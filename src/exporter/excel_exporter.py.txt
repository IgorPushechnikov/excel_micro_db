# src/exporter/excel_exporter.py
"""Основной модуль для экспорта данных проекта в новый Excel файл."""
import sys
from pathlib import Path
from typing import Dict, Any, List, Optional
from openpyxl import Workbook, load_workbook
from openpyxl.worksheet.worksheet import Worksheet
from openpyxl.workbook.workbook import Workbook as OpenpyxlWorkbook

# Добавляем корень проекта в путь поиска модулей
project_root = Path(__file__).parent.parent.parent
if str(project_root) not in sys.path:
    sys.path.insert(0, str(project_root))

# Импортируем модули-исполнители
# ВАЖНО: Эти модули не должны ничего знать о поэтапном экспорте.
# Они по-прежнему работают с объектами Worksheet и Workbook.
from src.exporter import data_and_formulas_exporter
from src.exporter import chart_exporter
from src.exporter import style_exporter

from src.utils.logger import get_logger

logger = get_logger(__name__)

# === НОВОЕ: Функции для поэтапного экспорта ===

def export_sheet_data_and_formulas(wb: OpenpyxlWorkbook, sheet_name: str, sheet_data: Dict[str, Any]) -> bool:
    """
    Экспортирует структуру, данные и формулы на лист.
    Args:
        wb (OpenpyxlWorkbook): Рабочая книга.
        sheet_name (str): Имя листа для экспорта.
        sheet_data (Dict[str, Any]): Данные листа.
    Returns:
        bool: True если экспорт успешен, False в противном случае.
    """
    logger.info(f"[ЭКСПОРТ_ДАННЫХ_И_ФОРМУЛ] === Начало экспорта данных и формул для листа '{sheet_name}' ===")
    try:
        # Получаем или создаем лист
        if sheet_name in wb.sheetnames:
            ws = wb[sheet_name]
            logger.debug(f"[ЭКСПОРТ_ДАННЫХ_И_ФОРМУЛ] Лист '{sheet_name}' уже существует в книге.")
        else:
            ws = wb.create_sheet(title=sheet_name)
            logger.debug(f"[ЭКСПОРТ_ДАННЫХ_И_ФОРМУЛ] Создан новый лист '{sheet_name}'.")

        # --- МОДУЛЬ 1: Данные и Формулы ---
        logger.debug(f"[ЭКСПОРТ_ДАННЫХ_И_ФОРМУЛ] === Вызов модуля 'data_and_formulas_exporter' для листа '{sheet_name}' ===")
        
        # Экспортируем структуру листа (заголовки)
        structure_data = sheet_data.get("structure", [])
        data_and_formulas_exporter.export_sheet_structure(ws, structure_data)

        # Экспортируем сырые данные
        raw_data_info = sheet_data.get("raw_data", {})
        data_and_formulas_exporter.export_sheet_raw_data(ws, raw_data_info)

        # Экспортируем формулы
        formulas_data = sheet_data.get("formulas", [])
        logger.debug(f"[ЭКСПОРТ_ДАННЫХ_И_ФОРМУЛ] Данные формул для '{sheet_name}': {len(formulas_data)} формул")
        data_and_formulas_exporter.export_sheet_formulas(ws, formulas_data)
        
        logger.info(f"[ЭКСПОРТ_ДАННЫХ_И_ФОРМУЛ] === Завершен экспорт данных и формул для листа '{sheet_name}' ===")
        return True

    except Exception as e:
        logger.error(f"[ЭКСПОРТ_ДАННЫХ_И_ФОРМУЛ] Ошибка при экспорте данных и формул для листа '{sheet_name}': {e}", exc_info=True)
        return False

def export_sheet_styles(wb: OpenpyxlWorkbook, sheet_name: str, sheet_data: Dict[str, Any]) -> bool:
    """
    Экспортирует стили на лист.
    Args:
        wb (OpenpyxlWorkbook): Рабочая книга.
        sheet_name (str): Имя листа для экспорта.
        sheet_data (Dict[str, Any]): Данные листа.
    Returns:
        bool: True если экспорт успешен, False в противном случае.
    """
    logger.info(f"[ЭКСПОРТ_СТИЛЕЙ] === Начало экспорта стилей для листа '{sheet_name}' ===")
    try:
        # Получаем лист
        if sheet_name not in wb.sheetnames:
            logger.error(f"[ЭКСПОРТ_СТИЛЕЙ] Лист '{sheet_name}' не найден в книге.")
            return False
        ws = wb[sheet_name]

        # --- МОДУЛЬ 2: Стили ---
        logger.debug(f"[ЭКСПОРТ_СТИЛЕЙ] === Вызов модуля 'style_exporter' для листа '{sheet_name}' ===")
        styled_ranges_data = sheet_data.get("styled_ranges", []) # Это список словарей {style_attributes, range_address}
        logger.debug(f"[ЭКСПОРТ_СТИЛЕЙ] Данные стилей для '{sheet_name}': {len(styled_ranges_data)} диапазонов")
        # Передаем wb для добавления именованных стилей
        style_exporter.export_sheet_styles(ws, styled_ranges_data, wb) 
        logger.info(f"[ЭКСПОРТ_СТИЛЕЙ] === Завершен экспорт стилей для листа '{sheet_name}' ===")
        return True

    except Exception as e:
        logger.error(f"[ЭКСПОРТ_СТИЛЕЙ] Ошибка при экспорте стилей для листа '{sheet_name}': {e}", exc_info=True)
        return False

def export_sheet_charts(wb: OpenpyxlWorkbook, sheet_name: str, sheet_data: Dict[str, Any]) -> bool:
    """
    Экспортирует диаграммы на лист.
    Args:
        wb (OpenpyxlWorkbook): Рабочая книга.
        sheet_name (str): Имя листа для экспорта.
        sheet_data (Dict[str, Any]): Данные листа.
    Returns:
        bool: True если экспорт успешен, False в противном случае.
    """
    logger.info(f"[ЭКСПОРТ_ДИАГРАММ] === Начало экспорта диаграмм для листа '{sheet_name}' ===")
    try:
        # Получаем лист
        if sheet_name not in wb.sheetnames:
            logger.error(f"[ЭКСПОРТ_ДИАГРАММ] Лист '{sheet_name}' не найден в книге.")
            return False
        ws = wb[sheet_name]

        # --- МОДУЛЬ 3: Диаграммы ---
        logger.debug(f"[ЭКСПОРТ_ДИАГРАММ] === Вызов модуля 'chart_exporter' для листа '{sheet_name}' ===")
        charts_data = sheet_data.get("charts", []) # Это список словарей chart_info
        logger.debug(f"[ЭКСПОРТ_ДИАГРАММ] Данные диаграмм для '{sheet_name}': {len(charts_data)} диаграмм")
        # Передаем wb для доступа к другим листам
        chart_exporter.export_sheet_charts(ws, charts_data, wb) 
        logger.info(f"[ЭКСПОРТ_ДИАГРАММ] === Завершен экспорт диаграмм для листа '{sheet_name}' ===")
        return True

    except Exception as e:
        logger.error(f"[ЭКСПОРТ_ДИАГРАММ] Ошибка при экспорте диаграмм для листа '{sheet_name}': {e}", exc_info=True)
        return False

# === КОНЕЦ НОВОГО ===

def export_project_to_excel(db_path: str, output_path: str, project_path: Optional[str] = None) -> bool:
    """
    Экспортирует данные проекта в новый Excel файл поэтапно.

    Args:
        db_path (str): Путь к базе данных проекта.
        output_path (str): Путь для сохранения нового Excel файла.
        project_path (str, optional): Путь к директории проекта.

    Returns:
        bool: True если экспорт успешен, False в противном случае.
    """
    logger.info(f"[ЭКСПОРТ_ПРОЕКТА] === Начало поэтапного экспорта проекта в: {output_path} ===")
    
    try:
        # Импортируем здесь чтобы избежать циклических импортов
        from src.storage.database import ProjectDBStorage

        # Создаем экземпляр хранилища
        storage = ProjectDBStorage(db_path)
        storage.connect()
        
        try:
            # Загружаем все данные проекта из хранилища
            logger.debug("[ЭКСПОРТ_ПРОЕКТА] Загрузка всех данных проекта из БД...")
            project_data = storage.get_all_data()
            logger.debug(f"[ЭКСПОРТ_ПРОЕКТА] Данные проекта загружены. Тип: {type(project_data)}")
            
            if not project_data or "sheets" not in project_data:
                logger.error("[ЭКСПОРТ_ПРОЕКТА] Не удалось загрузить данные проекта или список листов пуст.")
                return False

            project_info = project_data.get("project_info", {})
            sheets_data = project_data.get("sheets", {})
            
            logger.info(f"[ЭКСПОРТ_ПРОЕКТА] Найдено {len(sheets_data)} листов для экспорта")

            # === ИЗМЕНЕНО: Поэтапный экспорт ===
            
            # --- Этап 1: Создание файла с данными и формулами ---
            logger.info("[ЭКСПОРТ_ПРОЕКТА] === Этап 1: Создание файла с данными и формулами ===")
            
            # Создаем новую рабочую книгу
            logger.debug("[ЭКСПОРТ_ПРОЕКТА] Создание новой рабочей книги...")
            wb_stage1: OpenpyxlWorkbook = Workbook()
            logger.debug("[ЭКСПОРТ_ПРОЕКТА] Новая рабочая книга создана.")
            
            # Удаляем стандартный лист, созданный openpyxl
            default_sheet = wb_stage1.active
            logger.debug("[ЭКСПОРТ_ПРОЕКТА] Удаление стандартного листа.")
            wb_stage1.remove(default_sheet)

            # Создаем все листы заранее
            worksheets_dict_stage1: Dict[str, Worksheet] = {}
            for sheet_name, sheet_info in sheets_data.items():
                logger.info(f"[ЭКСПОРТ_ПРОЕКТА] Создание листа: {sheet_name}")
                ws = wb_stage1.create_sheet(title=sheet_name)
                worksheets_dict_stage1[sheet_name] = ws

            # Экспортируем данные и формулы для каждого листа
            for sheet_name, sheet_info in sheets_data.items():
                logger.info(f"[ЭКСПОРТ_ПРОЕКТА] Экспорт данных и формул для листа: {sheet_name}")
                if not export_sheet_data_and_formulas(wb_stage1, sheet_name, sheet_info):
                    logger.error(f"[ЭКСПОРТ_ПРОЕКТА] Ошибка экспорта данных и формул для листа '{sheet_name}'. Продолжаем с другими листами.")
                    # Можно решить, прерывать ли весь процесс или продолжать
            
            # Сохраняем промежуточный файл
            logger.info(f"[ЭКСПОРТ_ПРОЕКТА] Сохранение промежуточного файла с данными и формулами в {output_path}...")
            wb_stage1.save(output_path)
            # wb_stage1.close() # save() уже закрывает файл
            logger.info("[ЭКСПОРТ_ПРОЕКТА] === Этап 1 завершен успешно. ===")

            # --- Этап 2: Применение стилей ---
            logger.info("[ЭКСПОРТ_ПРОЕКТА] === Этап 2: Применение стилей ===")
            
            # Загружаем файл с данными и формулами
            logger.debug(f"[ЭКСПОРТ_ПРОЕКТА] Загрузка файла с данными и формулами из {output_path}...")
            wb_stage2: OpenpyxlWorkbook = load_workbook(output_path, data_only=False) # data_only=False для сохранения формул
            logger.debug("[ЭКСПОРТ_ПРОЕКТА] Файл с данными и формулами загружен.")

            # Экспортируем стили для каждого листа
            for sheet_name, sheet_info in sheets_data.items():
                logger.info(f"[ЭКСПОРТ_ПРОЕКТА] Экспорт стилей для листа: {sheet_name}")
                if not export_sheet_styles(wb_stage2, sheet_name, sheet_info):
                    logger.error(f"[ЭКСПОРТ_ПРОЕКТА] Ошибка экспорта стилей для листа '{sheet_name}'. Продолжаем с другими листами.")
                    # Можно решить, прерывать ли весь процесс или продолжать

            # Сохраняем файл со стилями
            logger.info(f"[ЭКСПОРТ_ПРОЕКТА] Сохранение файла со стилями в {output_path}...")
            wb_stage2.save(output_path)
            # wb_stage2.close() # save() уже закрывает файл
            logger.info("[ЭКСПОРТ_ПРОЕКТА] === Этап 2 завершен успешно. ===")

            # --- Этап 3: Добавление диаграмм ---
            logger.info("[ЭКСПОРТ_ПРОЕКТА] === Этап 3: Добавление диаграмм ===")
            
            # Загружаем файл со стилями
            logger.debug(f"[ЭКСПОРТ_ПРОЕКТА] Загрузка файла со стилями из {output_path}...")
            wb_stage3: OpenpyxlWorkbook = load_workbook(output_path, data_only=False) # data_only=False для сохранения формул
            logger.debug("[ЭКСПОРТ_ПРОЕКТА] Файл со стилями загружен.")

            # Экспортируем диаграммы для каждого листа
            for sheet_name, sheet_info in sheets_data.items():
                logger.info(f"[ЭКСПОРТ_ПРОЕКТА] Экспорт диаграмм для листа: {sheet_name}")
                if not export_sheet_charts(wb_stage3, sheet_name, sheet_info):
                    logger.error(f"[ЭКСПОРТ_ПРОЕКТА] Ошибка экспорта диаграмм для листа '{sheet_name}'. Продолжаем с другими листами.")
                    # Можно решить, прерывать ли весь процесс или продолжать

            # Сохраняем финальный файл
            logger.info(f"[ЭКСПОРТ_ПРОЕКТА] Сохранение финального файла с диаграммами в {output_path}...")
            wb_stage3.save(output_path)
            # wb_stage3.close() # save() уже закрывает файл
            logger.info("[ЭКСПОРТ_ПРОЕКТА] === Этап 3 завершен успешно. ===")
            
            # === КОНЕЦ ИЗМЕНЕНИЙ ===

            logger.info(f"[ЭКСПОРТ_ПРОЕКТА] === Проект успешно экспортирован в: {output_path} ===")
            return True
            
        finally:
            storage.disconnect()
            
    except Exception as e:
        logger.error(f"[ЭКСПОРТ_ПРОЕКТА] Критическая ошибка при экспорте проекта: {e}", exc_info=True)
        return False

# Пример использования (если файл запущен напрямую)
if __name__ == "__main__":
    # Простая демонстрация
    logger.info("Модуль excel_exporter готов к использованию.")
